{"title":"Portal Migration","index":{"title":"Clay","description":"Learn how to migrate Portal to new Clay components.","content":" Brought to you by Liferay, Inc. Powered by WeDeploy™ new WOW().init(); ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/./","children":{"docs":{"title":"Docs","url":"/docs/components/alerts.html","layout":false,"content":" ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","customURL":true,"children":{"search":{"description":"Documentation search results.","hidden":true,"title":"Search","content":" Electric Docs Start learning how to leverage the power of Electric. ","srcFilePath":"src/pages/docs/search.soy","id":"search","location":"/docs/search.html","url":"/docs/search.html"},"accessibility":{"children":{"accessibility":{"title":"Accessibility","layout":"tips","weight":200,"content":" Please, keep in mind that cognitive disabilities are among the most common ones. They require from our designs and developments to produce clear and direct messages that simplify the understanding of our apps. Our interface will be designed by UX designers to be clear but we need to make sure the interface can be read clearly out of context. Try to keep this in mind during your accessibility reviews. Keyboard navigation: All links and buttons should be accessible by keyboard. Avoid keyboard traps (keyboard tab loops). Control the lineal focus direction, it must follow a correct visual and logic order. Create a keyboard widget if the component is complex, for example; a table with order/actions/filters. Semantics All visual content in interfaces need text title or description. A simple button / link can be confusing. Try to make sure your button's intent is clear. For example, an icon button must provide a description text using the class .sr-only (screen reader only). Use CSS/HTML validators. Tools like Axe accessibility bar can help you a lot. Screen Readers There are a lot of different screen readers, offered by OS, browser, from open source and paid apps but mainly there are two ways to read screen content: by a touchable device or a regular tabulation. Touchable screens readers can be tested with iOS or Android activating its accessibility readers. In case of you use iOS the screen reader is VoiceOver and it has a similar behaviour than Mac version. To test in desktop you can use the native OS screen reader or a browser plugin like ChromeVox. We need to determine if buttons, links, titles and rest of meaning items have sense in a set or individually. For example: Visually the title “Add” makes sense becuase we see it inside the “Dynamic Data Lists” group. In a linear reading we have a dropdown, a navigation and all options of management bar between Title and Add Button, so this title could be renamed to “Add new list”. Color and Contrast If the application we are working on is based on Lexicon all components will be well contrasted. If it isn't (or even if it is), you can validate the contrast ratio with tools like Webaim Contrast Checker. If you are using accessibility validator probably you will get errors about color contrast, it can be an error for a validator bug when bg color is transparent. ","srcFilePath":"src/pages/docs/accessibility/accessibility.md","id":"accessibility","location":"/docs/accessibility/accessibility.html","url":"/docs/accessibility/accessibility.html"},"resources":{"title":"Accessibility Resources","layout":"tips","weight":200,"content":" Tools Axe plugin Color/contrast validator Links https://webaim.org/resources/ https://www.w3.org/WAI/Resources/ https://www.w3.org/WAI/bcase/resources ","srcFilePath":"src/pages/docs/accessibility/resources.md","id":"resources","location":"/docs/accessibility/resources.html","url":"/docs/accessibility/resources.html"}},"title":"Accessibility","url":"/docs/accessibility/accessibility.html","weight":2,"icon":"code","layout":false,"content":" ","srcFilePath":"src/pages/docs/accessibility/index.soy","id":"accessibility","location":"/docs/accessibility/","customURL":true,"childIds":["accessibility","resources"]},"javascript":{"title":"Javascript","url":"/docs/javascript/jQuery.html","weight":2,"icon":"code","layout":false,"content":" ","srcFilePath":"src/pages/docs/javascript/index.soy","id":"javascript","location":"/docs/javascript/","customURL":true,"children":{"jQuery":{"title":"jQuery","description":"","layout":"guide","weight":100,"clayTaglib":"Vanilla or Metal.js","content":"AUI.$ returns a jQuery nodeList with many methods available. Replacing it with document.querySelector or document.querySelectorAll we lose all that methods. How to migrate: Replace AUI.$(selector) with document.querySelector(selector) if expected result is one node. Replace AUI.$(selector) with document.querySelectorAll(selector) if expected result is more than one node. In this case you will have to iterate over the array to execute methods on each node if needed. Migrate methods: Some methods can't be directly replaced with native implementations so we may need to use some utilities from metal like metal-dom. To do it we need to import the module in the jsp in the following way. let dom = metalDomSrcDom.default; ... let domData = metalDomSrcDomData.default; ... Direct replacements jQuery | replacement --- | --- .addClass() | dom.addClasses(element, classes) .append() | dom.append(parent, child) .attr(attribute) | .getAttribute(attribute) .attr(attribute, value) | .setAttribute(attribute, value) .closest() | TODO .collapse() | TODO .data() | domData.get(element, 'propertyName') .data(value) | domData.set(element, 'propertyName', value) .each() | .forEach .find() | .querySelector() or querySelectorAll() .formToArray() | TODO .html() | .innerHTML .html(value) | .innerHTML = value .map() | [...document.querySelectorAll(selector)].map() .on() | addEventListener() .one() | dom.once(element, eventName, fn) .prepend() | TODO .prop('property') | element.property .prop('property', value) | element.property = value .ready(fn) | document.addEventListener('DOMContentLoaded', fn, false) window.addEventListener('load', fn,false) .remove() | dom.exitDocument(element) toggleClass('class') | dom.toggleClasses(element, 'class') .tooltip() | TODO .val() | .value .val(newValue) | .value = newValue Code replacements Replace .ajaxSubmit() with: fetch(url, { body: new FormData(form), credentials: 'include', method: 'POST', ... }) .then(response = ...); Replace .load() with: fetch(url, data) .then(response = { element.innerHTML = response; }); Replace .serializeArray() with: form dom.exitDocument(element) Replace .sideNavigation() TODO. Replace .toggle() with: if (element.style.display === 'none') element.style.display = 'block'; else element.style.display = 'none'; ","srcFilePath":"src/pages/docs/javascript/jQuery.md","id":"jQuery","location":"/docs/javascript/jQuery.html","url":"/docs/javascript/jQuery.html"},"lodash":{"title":"Lodash","description":"","layout":"guide","weight":100,"clayTaglib":"Vanilla or Metal.js","content":" How to migrate: Direct replacements lodash | replacement --- | --- _.bind | to native .bind. _.bindKey | there's no direct replacement. _.escape | there's no direct replacement. _.groupBy | there's no direct replacement. _.isEqual | there's no direct replacement. _.map | to native Array.map. _.reduce | to native Array.reduce. _.unescape | there's no direct replacement. _.sub | there's no direct replacement. _.without | there's no direct replacement. Code replacements _.debounce to metal-debounce. let debounce = metalDebounceSrcDebounce.default; debounce(fn, time); _.forEach to .forEach or for in [1,2,3].forEach((item) = { console.log(item); }); let obj = {a:1, b:2, c:3}; for(key in obj) { console.log(item); } _.isFunction to function isFunction(fn) { return (!!fn && (\"object\" == typeof fn || \"function\" == typeof fn)) && toString.call(fn) == '[object Function]' } ","srcFilePath":"src/pages/docs/javascript/lodash.md","id":"lodash","location":"/docs/javascript/lodash.html","url":"/docs/javascript/lodash.html"}},"childIds":["lodash","jQuery"]},"lexicon":{"children":{"add_menu":{"title":"Add Menu","description":"","layout":"lexiconMigrationGuide","weight":100,"clayComponentLink":"https://claycss.com/docs/components/management_toolbar.html","lexiconPattern":"Add Menu","lexiconPatternLink":"https://lexicondesign.io/docs/patterns/Toolbars/management_bar.html","content":" How does it look like now (7.0) Changes for Lexicon 2.0 (7.1) Change | Reason --- | --- ① The add menu is moved into the Management Toolbar | _ How to apply it? _ | Action | Mandatory --- | --- | --- 1 | Locate the code in your application | ✔ 2 | Move the add menu into the management toolbar | ✔ [1] Locate the code in your application Locate the code responsible for rendering the add menu in your application. It should resemble something like the following snippet found in fragment-web/view.jsp: Locate the code responsible for rendering the management toolbar in your application. It should resemble something like the following snippet found in fragment-web/view.jsp: ... [2] Move the add menu into the management toolbar Move the part in charge of the search into the liferay-frontend:management-bar section, right after the last of the liferay-frontend-management-bar-buttons item like it's shown in the following snippet. ... Who has done it already? LPS | Pull Request | Master --- | --- | --- LPS-77502 | https://github.com/brianchandotcom/liferay-portal/pull/54812 | ✘ ","srcFilePath":"src/pages/docs/lexicon/add_menu.md","id":"add_menu","location":"/docs/lexicon/add_menu.html","url":"/docs/lexicon/add_menu.html"},"horizontal_card":{"title":"Horizontal Card","description":"","layout":"lexiconMigrationGuide","weight":100,"clayComponentLink":"https://claycss.com/docs/components/cards.html","lexiconPattern":"Horizontal Card","lexiconPatternLink":"https://lexicondesign.io/docs/patterns/cards.html","content":" How does it look like now (7.0) Changes for Lexicon 2.0 (7.1) Change | Reason --- | --- ① The icons spritemap has changed | Fit with the new Lexicon icons ② The link style now is black, blue on hover. Also the entire card has hover state | Fit with new links styles and better visual feedback How to apply it? _ | Action | Mandatory --- | --- | --- 1 | Locate the code in your application | ✔ 2 | Use clay:horizontal-card instead of the old liferay-frontend:horizontal-card tag | ✔ 3 | Move the action items definition into a Display Context | ✘ [1] Locate the code in your application Locate the code responsible for rendering the horizontal card in your application. It should resemble something like the following snippet found in journal/journal-web/view_entries.jsp: ... [2] Use clay:horizontal-card instead of the old liferay-frontend:horizontal-card tag Start by adding the following imports to the imports section of your init.jsp file: // Import the clay tld file to be able to use the new tag // Import the DropdownItem utility class to create the items model Don't forget to add the dependencies with to the frontend-taglib-clay and fronteng.taglib.soy module in your build.gradle file: provided group: \"com.liferay\", name: \"com.liferay.frontend.taglib.soy\", version: \"1.0.0\" provided project(\":apps:foundation:frontend-taglib:frontend-taglib-clay\") Url param is now href. Text param is now title. Icon is passed now trough icon param instead as a content with horizontal-card-col and horizontal-card-col-icon For the actions you need to model them using the JSPDropdownItemList class. Check out the following Sample usage of JSPNavigationItemList for more information about it. [3] Move the action items definition into a Display Context This step is optional but recommended If your application already supports it (or even if it doesn't), consider moving the Java portion that generates the navigation items model into a *DisplayContext pattern to keep your jsps cleaner and server-free Check out the following Sample usage of DropdownItemList for more information about it. Who has done it already? LPS | Pull Request | Master --- | --- | --- ","srcFilePath":"src/pages/docs/lexicon/horizontal_card.md","id":"horizontal_card","location":"/docs/lexicon/horizontal_card.html","url":"/docs/lexicon/horizontal_card.html"},"navigation_bar":{"title":"Navigation Bar","description":"","layout":"lexiconMigrationGuide","weight":100,"clayComponentLink":"https://claycss.com/docs/components/navbar.html","lexiconPattern":"Navigation Bar","lexiconPatternLink":"https://lexicondesign.io/docs/patterns/Navigation/horizontalNav.html","content":" How does it look like now (7.0) Changes for Lexicon 2.0 (7.1) Change | Reason --- | --- ① The Navigation Bar is dark in admin applications (and light outside of admin contexts) | The Navigation Bar reflects Application Sections and the color helps make this connection ② The general search is moved out of the Navigation Bar and into the Management Toolbar | Search applies to the current Application data set and not the application itself How to apply it? _ | Action | Mandatory --- | --- | --- 1 | Locate the code in your application | ✔ 2 | Move the search into the management toolbar | ✔ 3 | Use clay:navigation-bar instead of the old aui:navbar tag | ✔ 4 | Extract application sections from the Actions Menu | ✘ 5 | Move the navigation items definition into a Display Context | ✘ [1] Locate the code in your application Locate the code responsible for rendering the navigation in your application. It should resemble something like the following snippet found in blogs-web/blogs-admin/view.jsp: Locate the code responsible for rendering the management toolbar in your application. It should resemble something like the following snippet found in blogs-web/blogs-admin/view_entries.jsp: ... [2] Move the search into the management toolbar Move the part in charge of the search into the liferay-frontend:management-bar section, right after the last of the liferay-frontend-management-bar-filters item like it's shown in the following snippet. Notice how the usage of aui:nav-bar-search from the original snippet is no longer necessary, but an additional `` item needs to be added. ... [3] Use clay:navigation-bar instead of the old aui:navbar tag Start by adding the following imports to the imports section of your init.jsp file: // Import the clay tld file to be able to use the new tag // Import the NavigationItem utility class to create the items model Don't forget to add the dependencies with to the frontend-taglib-clay and fronteng.taglib.soy module in your build.gradle file: provided group: \"com.liferay\", name: \"com.liferay.frontend.taglib.soy\", version: \"1.0.0\" provided project(\":apps:foundation:frontend-taglib:frontend-taglib-clay\") Model your entries using the JSPNavigationItemList class. The inverted attribute is set to true in all admin portlets. Instances in applications for live sites only can be left to false (default) Check out the following Sample usage of JSPNavigationItemList for more information about it. [4] Extract application sections from the Actions Menu This step is optional but recommended All Application Sections should be clearly visible in the Navigation Bar. Consider exploring what options your application currently has in the Actions Menu (find instances of *PortletConfigurationIcon) to find section candidates. [5] Move the navigation items definition into a Display Context This step is optional but recommended If your application already supports it (or even if it doesn't), consider moving the Java portion that generates the navigation items model into a *DisplayContext pattern to keep your jsps cleaner and server-free Check out the following Sample usage of NavigationItemList for more information about it. Who has done it already? LPS | Pull Request | Master --- | --- | --- LPS-77166 | https://github.com/brianchandotcom/liferay-portal/pull/54459 | ✘ ","srcFilePath":"src/pages/docs/lexicon/navigation_bar.md","id":"navigation_bar","location":"/docs/lexicon/navigation_bar.html","url":"/docs/lexicon/navigation_bar.html"},"management_toolbar":{"title":"Management Toolbar","url":"/docs/lexicon/management_toolbar/selectable.html","layout":false,"content":" ","srcFilePath":"src/pages/docs/lexicon/management_toolbar/index.soy","id":"management_toolbar","location":"/docs/lexicon/management_toolbar/","customURL":true,"children":{"selectable":{"parent":"Management Toolbar","title":"Selectable","description":"","layout":"lexiconMigrationGuide","weight":100,"clayComponentLink":"https://claycss.com/docs//components/management_toolbar.html","lexiconPattern":"Management Toolbar","lexiconPatternLink":"https://lexicondesign.io/docs/patterns/Toolbars/management_bar.html","content":" How does it look like now (7.0) Changes for Lexicon 2.0 (7.1) How to apply it? _ | Action | Mandatory --- | --- | --- 1 | Locate the code in your application | ✔ 2 | Use clay:management-toolbar instead of the old liferay-frontend:management-bar tag | ✔ 2 | Move the definitions into a Display Context | ✘ [1] Locate the code in your application Locate the code responsible for rendering the management-bar in your application. It should resemble something like the following snippet found in asset-tags-admin-web/view.jsp: ... [2] Use clay:management-toolbar instead of the old liferay-frontend:management-bar tag Start by adding the following imports to the imports section of your init.jsp file: // Import the clay tld file to be able to use the new tag // Import the DropdownItemList utility class to create the action items model Don't forget to add the dependencies with to the frontend-taglib-clay and fronteng.taglib.soy module in your build.gradle file: compileOnly project(\":apps:foundation:frontend-taglib:frontend-taglib-clay\") compileOnly project(\":apps:foundation:frontend-taglib:frontend-taglib-soy\") Implement the new taglib Parameter | Description | Default --- | --- | --- actionItems | Is the list of dropdownItems to show as actions in the active state. | _ disabled | To disable or not the management toolbar. Usually should be disabled when there're no results | _ namespace | If passed the params infoPanelId, searchFormName, searchInputName and searchContainerId will be automatically namespaced. | _ searchContainerId | The id of the searchContainer the management toolbar will be connected to. | _ selectable | To show or not the checkbox to interact with the dataset. Previous includeCheckBox. | true totalItems | Is the total number of items that appears in the dataset to reflect it in the results bar and in the active state. | _ [3] Move the definitions into a Display Context This step is optional but recommended If your application already supports it (or even if it doesn't), consider moving the Java portion that generates the navigation items model into a *DisplayContext pattern to keep your jsps cleaner and server-free ","srcFilePath":"src/pages/docs/lexicon/management_toolbar/selectable.md","id":"selectable","location":"/docs/lexicon/management_toolbar/selectable.html","url":"/docs/lexicon/management_toolbar/selectable.html"},"with_creation_menu":{"parent":"Management Toolbar","title":"with Creation Menu","description":"","layout":"lexiconMigrationGuide","weight":100,"clayComponentLink":"https://claycss.com/docs//components/management_toolbar.html","lexiconPattern":"Management Toolbar","lexiconPatternLink":"https://lexicondesign.io/docs/patterns/Toolbars/management_bar.html","content":" How does it look like now (7.0) Changes for Lexicon 2.0 (7.1) Change | Reason --- | --- ① Add Menu is now part of the Management Toolbar | See Add Menu. How to apply it? _ | Action | Mandatory --- | --- | --- 1 | Locate the code in your application | ✔ 2 | Use clay:management-toolbar instead of the old liferay-frontend:management-bar tag | ✔ 3 | Move the creation menu definition into a Display Context | ✘ [1] Locate the code in your application Locate the code responsible for rendering the management-bar in your application. It should resemble something like the following snippet found in asset-tags-admin-web/view.jsp: ... ... ... [2] Use clay:management-toolbar instead of the old liferay-frontend:management-bar tag Start by adding the following imports to the imports section of your init.jsp file: // Import the clay tld file to be able to use the new tag // Import the CreationMenu utility class to create the creation menu model Don't forget to add the dependencies with to the frontend-taglib-clay and fronteng.taglib.soy module in your build.gradle file: compileOnly project(\":apps:foundation:frontend-taglib:frontend-taglib-clay\") compileOnly project(\":apps:foundation:frontend-taglib:frontend-taglib-soy\") Implement the new taglib Parameter | Description | Default --- | --- | --- creationMenu | Is the list of dropdownItems to show in the creation menu. If only one item is present add button will be a link instead a dropdown. | _ disabled | To disable or not the management toolbar. Usually should be disabled when there're no results | _ namespace | If passed the params infoPanelId, searchFormName, searchInputName and searchContainerId will be automatically namespaced. | _ selectable | To show or not the checkbox to interact with the dataset. Previous includeCheckBox. | true showCreationMenu | To show or not the add content button. | If creationMenu != null true else false. totalItems | Is the total number of items that appears in the dataset to reflect it in the results bar and in the active state. | _ [3] Move the definitions into a Display Context This step is optional but recommended If your application already supports it (or even if it doesn't), consider moving the Java portion that generates the navigation items model into a *DisplayContext pattern to keep your jsps cleaner and server-free ","srcFilePath":"src/pages/docs/lexicon/management_toolbar/with_creation_menu.md","id":"with_creation_menu","location":"/docs/lexicon/management_toolbar/with_creation_menu.html","url":"/docs/lexicon/management_toolbar/with_creation_menu.html"},"with_filters":{"parent":"Management Toolbar","title":"with Filters","description":"","layout":"lexiconMigrationGuide","weight":100,"clayComponentLink":"https://claycss.com/docs//components/management_toolbar.html","lexiconPattern":"Management Toolbar","lexiconPatternLink":"https://lexicondesign.io/docs/patterns/Toolbars/management_bar.html","content":" How does it look like now (7.0) Changes for Lexicon 2.0 (7.1) Change | Reason --- | --- ① Filters and sorting are group in one dropdown | Lexicon wants the main management toolbar section to be the search form. ② Sorting buttons are now a single toggle button | Reduce the used space in the toolbar. How to apply it? _ | Action | Mandatory --- | --- | --- 1 | Locate the code in your application | ✔ 2 | Use clay:management-toolbar instead of the old liferay-frontend:management-bar tag | ✔ 2 | Move the definitions into a Display Context | ✘ [1] Locate the code in your application Locate the code responsible for rendering the management-bar in your application. It should resemble something like the following snippet found in asset-tags-admin-web/view.jsp: ... ... [2] Use clay:management-toolbar instead of the old liferay-frontend:management-bar tag Start by adding the following imports to the imports section of your init.jsp file: // Import the clay tld file to be able to use the new tag // Import the DropdownItemList utility class to create the filter items model Don't forget to add the dependencies with to the frontend-taglib-clay and fronteng.taglib.soy module in your build.gradle file: compileOnly project(\":apps:foundation:frontend-taglib:frontend-taglib-clay\") compileOnly project(\":apps:foundation:frontend-taglib:frontend-taglib-soy\") Implement the new taglib Parameter | Description | Default --- | --- | --- disabled | To disable or not the management toolbar. Usually should be disabled when there're no results | _ filterItems | Is the list of dropdownItems to show in the filters list. This contains both fiter and sorting items. | _ namespace | If passed the params infoPanelId, searchFormName, searchInputName and searchContainerId will be automatically namespaced. | _ selectable | To show or not the checkbox to interact with the dataset. Previous includeCheckBox. | true sortingOrder | Current sorting order asc or desc | asc sortingURL | URL to change sorting order, usually changing asc to desc and vice versa. | _ totalItems | Is the total number of items that appears in the dataset to reflect it in the results bar and in the active state. | _ [3] Move the definitions into a Display Context This step is optional but recommended If your application already supports it (or even if it doesn't), consider moving the Java portion that generates the navigation items model into a *DisplayContext pattern to keep your jsps cleaner and server-free ","srcFilePath":"src/pages/docs/lexicon/management_toolbar/with_filters.md","id":"with_filters","location":"/docs/lexicon/management_toolbar/with_filters.html","url":"/docs/lexicon/management_toolbar/with_filters.html"},"with_info_button":{"parent":"Management Toolbar","title":"with Info Button","description":"","layout":"lexiconMigrationGuide","weight":100,"clayComponentLink":"https://claycss.com/docs//components/management_toolbar.html","lexiconPattern":"Management Toolbar","lexiconPatternLink":"https://lexicondesign.io/docs/patterns/Toolbars/management_bar.html","content":" How does it look like now (7.0) Changes for Lexicon 2.0 (7.1) How to apply it? _ | Action | Mandatory --- | --- | --- 1 | Locate the code in your application | ✔ 2 | Use clay:management-toolbar instead of the old liferay-frontend:management-bar tag | ✔ 2 | Move the definitions into a Display Context | ✘ [1] Locate the code in your application Locate the code responsible for rendering the management-bar in your application. It should resemble something like the following snippet found in journal-web/toolbar.jsp: ... ... [2] Use clay:management-toolbar instead of the old liferay-frontend:management-bar tag Start by adding the following imports to the imports section of your init.jsp file: // Import the clay tld file to be able to use the new tag Don't forget to add the dependencies with to the frontend-taglib-clay and fronteng.taglib.soy module in your build.gradle file: compileOnly project(\":apps:foundation:frontend-taglib:frontend-taglib-clay\") compileOnly project(\":apps:foundation:frontend-taglib:frontend-taglib-soy\") Implement the new taglib Parameter | Description | Default --- | --- | --- disabled | To disable or not the management toolbar. Usually should be disabled when there're no results | _ infoPanelId | The id of the infor panel to toggle. | _ namespace | If passed the params infoPanelId, searchFormName, searchInputName and searchContainerId will be automatically namespaced. | _ searchContainerId | The id of the searchContainer the management toolbar will be connected to. | _ selectable | To show or not the checkbox to interact with the dataset. Previous includeCheckBox. | true showInfoButton | To show or not the info button. | If infoPanelId != null true else false. [3] Move the definitions into a Display Context This step is optional but recommended If your application already supports it (or even if it doesn't), consider moving the Java portion that generates the navigation items model into a *DisplayContext pattern to keep your jsps cleaner and server-free ","srcFilePath":"src/pages/docs/lexicon/management_toolbar/with_info_button.md","id":"with_info_button","location":"/docs/lexicon/management_toolbar/with_info_button.html","url":"/docs/lexicon/management_toolbar/with_info_button.html"},"with_search":{"parent":"Management Toolbar","title":"with Search","description":"","layout":"lexiconMigrationGuide","weight":100,"clayComponentLink":"https://claycss.com/docs//components/management_toolbar.html","lexiconPattern":"Management Toolbar","lexiconPatternLink":"https://lexicondesign.io/docs/patterns/Toolbars/management_bar.html","content":" How does it look like now (7.0) Changes for Lexicon 2.0 (7.1) Change | Reason --- | --- ① Fills all the bar if only search is present | Lexicon wants the main management toolbar section to be the search form. How to apply it? _ | Action | Mandatory --- | --- | --- 1 | Locate the code in your application | ✔ 2 | Use clay:management-toolbar instead of the old liferay-frontend:management-bar tag | ✔ [1] Locate the code in your application Locate the code responsible for rendering the management-bar in your application. It should resemble something like the following snippet found in wiki-web/item/selector/wiki_pages.jsp: [2] Use clay:management-toolbar instead of the old liferay-frontend:management-bar tag Start by adding the following imports to the imports section of your init.jsp file: // Import the clay tld file to be able to use the new tag Don't forget to add the dependencies with to the frontend-taglib-clay and fronteng.taglib.soy module in your build.gradle file: compileOnly project(\":apps:foundation:frontend-taglib:frontend-taglib-clay\") compileOnly project(\":apps:foundation:frontend-taglib:frontend-taglib-soy\") Implement the new taglib Parameter | Description | Default --- | --- | --- clearResultsURL | Is the URL to reset the search. | _ disabled | To disable or not the management toolbar. Usually should be disabled when there're no results | _ namespace | If passed the params infoPanelId, searchFormName, searchInputName and searchContainerId will be automatically namespaced. | _ searchActionURL | Is the action URL to send the search form. | _ searchFormName | The name of the form. | _ searchInputName | The name of the search input. | DisplayTerms.KEYWORDS searchValue | The value of the search input. | ParamUtil.getString(request, searchInputName) selectable | To show or not the checkbox to interact with the dataset. Previous includeCheckBox. | true totalItems | Is the total number of items that appears in the dataset to reflect it in the results bar and in the active state. | _ [3] Move the definitions into a Display Context This step is optional but recommended If your application already supports it (or even if it doesn't), consider moving the Java portion that generates the navigation items model into a *DisplayContext pattern to keep your jsps cleaner and server-free ","srcFilePath":"src/pages/docs/lexicon/management_toolbar/with_search.md","id":"with_search","location":"/docs/lexicon/management_toolbar/with_search.html","url":"/docs/lexicon/management_toolbar/with_search.html"},"with_view_types":{"parent":"Management Toolbar","title":"with View Types","description":"","layout":"lexiconMigrationGuide","weight":100,"clayComponentLink":"https://claycss.com/docs//components/management_toolbar.html","lexiconPattern":"Management Toolbar","lexiconPatternLink":"https://lexicondesign.io/docs/patterns/Toolbars/management_bar.html","content":" How does it look like now (7.0) Changes for Lexicon 2.0 (7.1) How to apply it? _ | Action | Mandatory --- | --- | --- 1 | Locate the code in your application | ✔ 2 | Use clay:management-toolbar instead of the old liferay-frontend:management-bar tag | ✔ 2 | Move the definitions into a Display Context | ✘ [1] Locate the code in your application Locate the code responsible for rendering the management-bar in your application. It should resemble something like the following snippet found in asset-tags-admin-web/view.jsp: ... ... ... [2] Use clay:management-toolbar instead of the old liferay-frontend:management-bar tag Start by adding the following imports to the imports section of your init.jsp file: // Import the clay tld file to be able to use the new tag // Import the ViewTypeItemList utility class to create the action items model Don't forget to add the dependencies with to the frontend-taglib-clay and fronteng.taglib.soy module in your build.gradle file: compileOnly project(\":apps:foundation:frontend-taglib:frontend-taglib-clay\") compileOnly project(\":apps:foundation:frontend-taglib:frontend-taglib-soy\") Implement the new taglib Parameter | Description | Default --- | --- | --- actionItems | Is the list of dropdownItems to show as actions in the active state. | _ namespace | If passed the params infoPanelId, searchFormName, searchInputName and searchContainerId will be automatically namespaced. | _ searchContainerId | The id of the searchContainer the management toolbar will be connected to. | _ selectable | To show or not the checkbox to interact with the dataset. Previous includeCheckBox. | true totalItems | Is the total number of items that appears in the dataset to reflect it in the results bar and in the active state. | _ [3] Move the definitions into a Display Context This step is optional but recommended If your application already supports it (or even if it doesn't), consider moving the Java portion that generates the navigation items model into a *DisplayContext pattern to keep your jsps cleaner and server-free ","srcFilePath":"src/pages/docs/lexicon/management_toolbar/with_view_types.md","id":"with_view_types","location":"/docs/lexicon/management_toolbar/with_view_types.html","url":"/docs/lexicon/management_toolbar/with_view_types.html"}},"childIds":["selectable","with_creation_menu","with_filters","with_info_button","with_search","with_view_types"]}},"title":"Lexicon","description":"Everything you need to know to migrate old tabligs to Clay taglibs.","url":"/docs/lexicon/add_menu.html","weight":2,"icon":"heart","layout":false,"content":" ","srcFilePath":"src/pages/docs/lexicon/index.soy","id":"lexicon","location":"/docs/lexicon/","customURL":true,"childIds":["add_menu","horizontal_card","navigation_bar","management_toolbar"]}},"childIds":["accessibility","javascript","lexicon","search"]}},"childIds":["docs"]}}